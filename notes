Here are the step-by-step instructions to create a React Native app with MongoDB and Expo:

Step 1: Install Node.js and npm

Go to the Node.js website (https://nodejs.org/en/download/) and download the latest version of Node.js for your operating system.
Follow the installation instructions to install Node.js and npm (the package manager for Node.js).
Step 2: Install Expo

Open a terminal or command prompt and run the following command: npm install -g expo-cli
This will install the Expo CLI (Command-Line Interface) globally on your system.
Step 3: Create a new Expo project

Run the following command: expo init WaterQualityApp
Follow the prompts to choose a template (e.g., "blank" or "tabs") and choose a name for your app (e.g., "WaterQualityApp").
This will create a new Expo project in a directory called "WaterQualityApp".
Step 4: Install required packages

Open the "WaterQualityApp" directory in your terminal or command prompt.
Run the following commands to install the required packages:
npm install express
npm install mongodb
npm install node-cron
npm install axios
npm install react-native-svg
Step 5: Create a MongoDB database

Go to the MongoDB website (https://www.mongodb.com/) and create a free account.
Follow the instructions to create a new MongoDB database.
Note down the database URL, username, and password.



Step 6: Create a server-side API

Create a new file called "server.js" in the "WaterQualityApp" directory.
Copy and paste the server-side code I provided earlier into this file.
Update the MongoDB database URL, username, and password in the code.
Step 7: Create a client-side app

Create a new file called "WaterQualityPage.js" in the "WaterQualityApp" directory.
Copy and paste the client-side code I provided earlier into this file.
Update the API endpoint URLs to point to your server-side API.
Step 8: Start the server-side API

Run the following command: node server.js
This will start the server-side API and make it available at http://localhost:8081.
Step 9: Start the Expo app

Run the following command: expo start
This will start the Expo app and make it available at http://localhost:19002.
Step 10: Test the app

Open a web browser and navigate to http://localhost:19002.
You should see the Water Quality app with a table and graph.
Click on the "View Details" buttons to navigate to the individual parameter details screens.
That's it! You should now have a working React Native app with MongoDB and Expo.











To implement the server and make it work with the Arduino and app, you'll need to complete the following steps:

Create a MongoDB database: Since you're using Mongoose, you'll need to create a MongoDB database to store the data. You can use a local MongoDB instance or a cloud-based service like MongoDB Atlas.
Set up the server: You've already created the Express.js server, but you'll need to configure it to listen for incoming requests from the Arduino and app. Make sure to update the arduino-ip-address placeholders in the code with the actual IP address of your Arduino board.
Implement API endpoints: You've defined some API endpoints, but you'll need to implement the logic for each endpoint. For example, when the app sends a request to /api/start-feeding, the server should forward the request to the Arduino and then update the Feeding model in the database.
Connect the Arduino to the server: You'll need to modify the Arduino code to send requests to the server when it receives commands from the app. You can use the WiFiClient library to send HTTP requests to the server.
Implement authentication and authorization: To ensure that only authorized devices can send requests to the server, you'll need to implement authentication and authorization mechanisms. You can use JSON Web Tokens (JWT) or another authentication library to secure your API.
Test the system: Once you've implemented the server, Arduino, and app, test the system to ensure that data is being sent correctly and that the server is updating the database accordingly.













------------------------------

rm -rf node_modules package-lock.json




































------------------------------------

function WaterQualityPage({ navigation, language }) {
  const [data, setData] = useState(undefined);
  const [alertTriggered, setAlertTriggered] = useState(false);
  const [apiErrorShown, setApiErrorShown] = useState(false);
  const [debugMsg, setDebugMsg] = useState("");
  const [species, setSpecies] = useState("tilapia");
  const [showLegendModal, setShowLegendModal] = useState(false);

  // Color palette for legend: Good, Moderate, Poor, Bad
  const legendColors = ["#388e3c", "#ffe082", "#ff7043", "#d32f2f"];

  // Manual translation for species options
  const speciesOptions = [
    { label: language === "English" ? "Tilapia" : "Tilapya", value: "tilapia", optimal: [26, 32] },
    { label: language === "English" ? "Milkfish" : "Bangus", value: "milkfish", optimal: [27, 30] },
    { label: language === "English" ? "Catfish" : "Hito", value: "catfish", optimal: [24, 30] },
    { label: language === "English" ? "Shrimp" : "Hipon", value: "shrimp", optimal: [28, 32] },
    { label: language === "English" ? "Custom Species" : "Ibang Isda", value: "custom", optimal: [25, 31] },
  ];

  const selectedSpecies = speciesOptions.find(s => s.value === species) || speciesOptions[0];
  const tempOptimalMin = selectedSpecies.optimal[0];
  const tempOptimalMax = selectedSpecies.optimal[1];

  useEffect(() => {
    let didShowError = false;
    const fetchData = async () => {
      try {
        const response = await fetch("http://localhost:3000/api/data");
        if (!response.ok) throw new Error("Network response was not ok");
        const jsonData = await response.json();
        setDebugMsg("");
        let latest = null;
        if (Array.isArray(jsonData) && jsonData.length > 0) {
          const sortedData = jsonData
            .filter(d => d && d.timestamp)
            .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
          latest = sortedData[0];
        } else if (jsonData && jsonData.timestamp) {
          latest = jsonData;
        }
        setData(latest || null);
        setApiErrorShown(false);
      } catch (error) {
        setDebugMsg("Fetch error: " + error.message);
        if (!didShowError && !apiErrorShown) {
          setApiErrorShown(true);
          didShowError = true;
          Alert.alert(
            language === "English" ? "Error" : "Error",
            language === "English"
              ? "Unable to connect to API. Please check your network connection."
              : "Hindi makakonekta sa API. Pakisuri ang iyong koneksyon sa internet."
          );
        }
        setData(null);
      }
    };

    fetchData();
    const intervalId = setInterval(fetchData, 2000);
    return () => clearInterval(intervalId);
  }, [language]);

  const safeValue = (val, digits = 2) =>
    typeof val === "number" && !isNaN(val) ? Number(val).toFixed(digits) : "--";

  const temperature = safeValue(data?.temperature, 1);
  const pH = safeValue(data?.pH, 2);
  const tds = safeValue(data?.tds, 0);
  const doConcentration = safeValue(data?.doConcentration, 2);
  const ammoniaLevel = safeValue(data?.ammoniaLevel, 2);
  const turbidityLevel = safeValue(data?.turbidityLevel, 2);

  // --- Estimated DO Calculation ---
  const estimateDO = () => {
    const temp = typeof data?.temperature === "number" ? data.temperature : undefined;
    const ph = typeof data?.pH === "number" ? data.pH : undefined;
    const turb = typeof data?.turbidityLevel === "number" ? data.turbidityLevel : undefined;
    if (typeof temp !== "number" || typeof ph !== "number" || typeof turb !== "number") return "--";
    // DOsat = 14.6 - (0.4 × T) + 0.01 × T²
    const DOsat = 14.6 - (0.4 * temp) + (0.01 * temp * temp);
    // f(pH, turbidity) = 1 - ((|pH - 7.5| / 3) + (turbidity / 100)) / 2
    const f = 1 - ((Math.abs(ph - 7.5) / 3) + (turb / 100)) / 2;
    const est = DOsat * f;
    return est > 0 ? est.toFixed(2) : "0.00";
  };
  const estimatedDO = estimateDO();

  function getPHColor(val) {
    if (val === "--") return legendColors[1];
    val = parseFloat(val);
    if (val >= 6.5 && val <= 8.5) return legendColors[0];
    if ((val >= 5.5 && val <= 6.4) || (val >= 8.6 && val <= 9.0)) return legendColors[1];
    if ((val >= 4.5 && val <= 5.4) || (val >= 9.1 && val <= 10.5)) return legendColors[2];
    if (val < 4.5 || val > 10.5) return legendColors[3];
    return legendColors[1];
  }
  function getTempColor(val) {
    if (val === "--") return legendColors[1];
    val = parseFloat(val);
    if (val >= tempOptimalMin && val <= tempOptimalMax) return legendColors[0];
    if ((val >= tempOptimalMin - 2 && val < tempOptimalMin) || (val > tempOptimalMax && val <= tempOptimalMax + 2))
      return legendColors[1];
    if ((val >= tempOptimalMin - 6 && val < tempOptimalMin - 2) || (val > tempOptimalMax + 2 && val <= tempOptimalMax + 4))
      return legendColors[2];
    if (val < tempOptimalMin - 6 || val > tempOptimalMax + 4) return legendColors[3];
    return legendColors[1];
  }
  function getDOColor(val) {
    if (val === "--") return legendColors[1];
    val = parseFloat(val);
    if (val >= 5.0) return legendColors[0];
    if (val >= 3.0 && val < 5.0) return legendColors[1];
    if (val >= 2.0 && val < 3.0) return legendColors[2];
    if (val < 2.0) return legendColors[3];
    return legendColors[1];
  }
  function getTurbidityColor(val) {
    if (val === "--") return legendColors[1];
    val = parseFloat(val);
    if (val >= 0 && val <= 5) return legendColors[0];
    if (val >= 6 && val <= 20) return legendColors[1];
    if (val >= 21 && val <= 50) return legendColors[2];
    if (val > 50) return legendColors[3];
    return legendColors[1];
  }
  function getAmmoniaColor(val) {
    if (val === "--") return legendColors[1];
    val = parseFloat(val);
    if (val <= 0.02) return legendColors[0];
    if (val > 0.02 && val <= 0.05) return legendColors[1];
    if (val > 0.05 && val <= 0.1) return legendColors[2];
    if (val > 0.1) return legendColors[3];
    return legendColors[1];
  }
  function getTDSColor(val) {
    if (val === "--") return legendColors[1];
    val = parseFloat(val);
    if (isNaN(val)) return legendColors[1];
    if (val < 100) return legendColors[0];
    if (val > 100) return legendColors[3];
    return legendColors[1];
  }

  const checkForAlert = () => {
    if (
      getTempColor(temperature) === legendColors[3] ||
      getPHColor(pH) === legendColors[3] ||
      getTDSColor(tds) === legendColors[3] ||
      getDOColor(doConcentration) === legendColors[3] ||
      getAmmoniaColor(ammoniaLevel) === legendColors[3] ||
      getTurbidityColor(turbidityLevel) === legendColors[3]
    ) {
      if (!alertTriggered) {
        setAlertTriggered(true);
        Alert.alert(
          language === "English" ? "Water Quality Alert" : "Babala sa Kalidad ng Tubig",
          language === "English"
            ? "One or more water quality parameters have reached a critical level!"
            : "May isa o higit pang parameter na nasa kritikal na antas!"
        );
      }
    } else {
      setAlertTriggered(false);
    }
  };

  useEffect(() => {
    if (data) checkForAlert();
    // eslint-disable-next-line
  }, [data, species]);

  // Manual translation for parameter labels and units
  const parameters = [
    {
      label: language === "English" ? "Temperature" : "Temperatura",
      value: temperature,
      unit: "°C",
      nav: "TemperatureDetails",
      color: getTempColor(temperature)
    },
    {
      label: "pH",
      value: pH,
      unit: "",
      nav: "PHDetails",
      color: getPHColor(pH)
    },
    {
      label: "TDS",
      value: tds,
      unit: "ppm",
      nav: "TDSDetails",
      color: getTDSColor(tds)
    },
    {
      label: language === "English" ? "DO" : "DO",
      value: doConcentration,
      unit: "mg/L",
      nav: "DOConcentrationDetails",
      color: getDOColor(doConcentration)
    },
    {
      label: language === "English" ? "Ammonia" : "Amonya",
      value: ammoniaLevel,
      unit: "mg/L",
      nav: "AmmoniaLevelDetails",
      color: getAmmoniaColor(ammoniaLevel)
    },
    {
      label: language === "English" ? "Turbidity" : "Kakuliman",
      value: turbidityLevel,
      unit: "NTU",
      nav: "TurbidityLevelDetails",
      color: getTurbidityColor(turbidityLevel)
    },
    // Estimated DO
    {
      label: language === "English" ? "Est. DO" : "Tantiyadong DO",
      value: estimatedDO,
      unit: "mg/L",
      nav: null,
      color: getDOColor(estimatedDO)
    },
  ];

  // Legend translation
  const legendLabels = language === "English"
    ? ["Good", "Moderate", "Poor", "Bad"]
    : ["Maganda", "Katamtaman", "Mahina", "Masama"];

  return (
    <View style={styles.waterQualityPage}>
      <View style={styles.bubble1} />
      <View style={styles.bubble2} />
      <View style={styles.bubble3} />

      <View style={[styles.glassCard, { width: "98%", maxWidth: 480, paddingVertical: 32, paddingHorizontal: 10 }]}>
        <Text style={[styles.heading, { marginBottom: 8, fontSize: 22 }]}>
          {language === "English" ? "WATER QUALITY MONITOR" : "PAGSUBAYBAY NG KALIDAD NG TUBIG"}
        </Text>
        <View style={{ marginBottom: 12, width: "100%", alignItems: "center" }}>
          <Text style={{ color: "#00796b", fontWeight: "bold", fontSize: 15, marginBottom: 4 }}>
            {language === "English"
              ? "Select Species (for Temperature Fuzzy Logic)"
              : "Pumili ng Isda (para sa Temperature Fuzzy Logic)"}
          </Text>
          <View style={{
            borderWidth: 1,
            borderColor: "#00796b",
            borderRadius: 10,
            backgroundColor: "#f7f8fc",
            width: 220,
            alignSelf: "center",
            marginBottom: 2,
          }}>
            <Picker
              selectedValue={species}
              onValueChange={setSpecies}
              style={{ width: "100%" }}
            >
              {speciesOptions.map(opt => (
                <Picker.Item key={opt.value} label={opt.label} value={opt.value} />
              ))}
            </Picker>
          </View>
          <Text style={{ fontSize: 12, color: "#888", marginTop: 2 }}>
            {language === "English"
              ? `Optimal: ${tempOptimalMin}°C to ${tempOptimalMax}°C`
              : `Pinakamainam: ${tempOptimalMin}°C hanggang ${tempOptimalMax}°C`}
          </Text>
        </View>
        <View style={{
          flexDirection: "row",
          alignItems: "center",
          marginBottom: 18,
        }}>
          {legendLabels.map((legend, idx) => (
            <TouchableOpacity
              key={legend}
              style={{ flexDirection: "row", alignItems: "center" }}
              onPress={() => setShowLegendModal(true)}
              activeOpacity={0.7}
            >
              <View style={{
                width: 12, height: 12, borderRadius: 6,
                backgroundColor: legendColors[idx],
                marginRight: 4,
              }} />
              <Text style={{
                color: legendColors[idx],
                fontWeight: "bold",
                marginRight: idx < 3 ? 12 : 0,
                fontSize: 13
              }}>{legend}</Text>
            </TouchableOpacity>
          ))}
        </View>

        {/* Legend Modal */}
        <Modal
          visible={showLegendModal}
          animationType="fade"
          transparent
          onRequestClose={() => setShowLegendModal(false)}
        >
          <View style={styles.modalOverlay}>
            <View style={[styles.modalCard, { backgroundColor: "#fff", alignItems: "center", minWidth: 320, padding: 0 }]}>
              <TouchableOpacity
                style={styles.modalClose}
                onPress={() => setShowLegendModal(false)}
              >
                <Ionicons name="close" size={28} color="#3a3fbd" />
              </TouchableOpacity>
              <ScrollView horizontal style={{ width: "100%" }}>
                <ScrollView style={{ maxHeight: 320 }}>
                  {/* Table Header */}
                  <View style={{ flexDirection: "row", backgroundColor: "#e0e7ff" }}>
                    <Text style={{ width: 90, fontWeight: "bold", color: "#222", padding: 6, textAlign: "center" }}>
                      {language === "English" ? "Parameter" : "Parameter"}
                    </Text>
                    {legendLabels.map((legend, idx) => (
                      <Text
                        key={legend}
                        style={{
                          width: 80,
                          fontWeight: "bold",
                          color: legendColors[idx],
                          padding: 6,
                          textAlign: "center"
                        }}
                      >
                        {legend}
                      </Text>
                    ))}
                  </View>
                  {/* Table Rows */}
                  <View style={{ flexDirection: "row", borderTopWidth: 1, borderColor: "#ddd", backgroundColor: "#fff" }}>
                    <Text style={{ width: 90, padding: 6, textAlign: "center" }}>pH</Text>
                    <Text style={{ width: 80, padding: 6, textAlign: "center" }}>6.5 - 8.5</Text>
                    <Text style={{ width: 80, padding: 6, textAlign: "center" }}>5.5-6.4{'\n'}8.6-9.0</Text>
                    <Text style={{ width: 80, padding: 6, textAlign: "center" }}>4.5-5.4{'\n'}9.1-10.5</Text>
                    <Text style={{ width: 80, padding: 6, textAlign: "center" }}>{'<4.5\n>10.5'}</Text>
                  </View>
                  <View style={{ flexDirection: "row", borderTopWidth: 1, borderColor: "#ddd", backgroundColor: "#f7f8fc" }}>
                    <Text style={{ width: 90, padding: 6, textAlign: "center" }}>
                      {language === "English" ? "Temperature" : "Temperatura"}
                    </Text>
                    <Text style={{ width: 80, padding: 6, textAlign: "center" }}>
                      {language === "English" ? "Species Optimal" : "Pinakamainam ng Isda"}
                    </Text>
                    <Text style={{ width: 80, padding: 6, textAlign: "center" }}>
                      {language === "English" ? "Slight deviation" : "Bahagyang labis/kulang"}
                    </Text>
                    <Text style={{ width: 80, padding: 6, textAlign: "center" }}>
                      {language === "English" ? "Significant deviation" : "Malaking labis/kulang"}
                    </Text>
                    <Text style={{ width: 80, padding: 6, textAlign: "center" }}>
                      {language === "English" ? "Extreme" : "Sobrang labis/kulang"}
                    </Text>
                  </View>
                  <View style={{ flexDirection: "row", borderTopWidth: 1, borderColor: "#ddd", backgroundColor: "#fff" }}>
                    <Text style={{ width: 90, padding: 6, textAlign: "center" }}>
                      {language === "English" ? "DO (mg/L)" : "DO (mg/L)"}
                    </Text>
                    <Text style={{ width: 80, padding: 6, textAlign: "center" }}>{'\u2265 5.0'}</Text>
                    <Text style={{ width: 80, padding: 6, textAlign: "center" }}>3.0 - 4.9</Text>
                    <Text style={{ width: 80, padding: 6, textAlign: "center" }}>2.0 - 2.9</Text>
                    <Text style={{ width: 80, padding: 6, textAlign: "center" }}>{'<2.0'}</Text>
                  </View>
                  <View style={{ flexDirection: "row", borderTopWidth: 1, borderColor: "#ddd", backgroundColor: "#f7f8fc" }}>
                    <Text style={{ width: 90, padding: 6, textAlign: "center" }}>
                      {language === "English" ? "Turbidity (NTU)" : "Kakuliman (NTU)"}
                    </Text>
                    <Text style={{ width: 80, padding: 6, textAlign: "center" }}>0 - 5</Text>
                    <Text style={{ width: 80, padding: 6, textAlign: "center" }}>6 - 20</Text>
                    <Text style={{ width: 80, padding: 6, textAlign: "center" }}>21 - 50</Text>
                    <Text style={{ width: 80, padding: 6, textAlign: "center" }}>{'>50'}</Text>
                  </View>
                  <View style={{ flexDirection: "row", borderTopWidth: 1, borderColor: "#ddd", backgroundColor: "#fff" }}>
                    <Text style={{ width: 90, padding: 6, textAlign: "center" }}>
                      {language === "English" ? "Ammonia (mg/L)" : "Amonya (mg/L)"}
                    </Text>
                    <Text style={{ width: 80, padding: 6, textAlign: "center" }}>{'\u2264 0.02'}</Text>
                    <Text style={{ width: 80, padding: 6, textAlign: "center" }}>0.03 - 0.05</Text>
                    <Text style={{ width: 80, padding: 6, textAlign: "center" }}>0.06 - 0.1</Text>
                    <Text style={{ width: 80, padding: 6, textAlign: "center" }}>{'>0.1'}</Text>
                  </View>
                </ScrollView>
              </ScrollView>
            </View>
          </View>
        </Modal>

        <ScrollView
          style={{
            width: "100%",
            maxHeight: 380,
            borderRadius: 18,
            backgroundColor: "rgba(255,255,255,0.7)",
            padding: 0,
          }}
          contentContainerStyle={{ padding: 10 }}
          showsVerticalScrollIndicator={false}
        >
          {parameters.map((param, idx) => (
            <View
              key={param.label}
              style={{
                flexDirection: "row",
                alignItems: "center",
                justifyContent: "space-between",
                marginBottom: idx < parameters.length - 1 ? 14 : 0,
                backgroundColor: "#fff",
                borderRadius: 14,
                paddingVertical: 14,
                paddingHorizontal: 14,
                shadowColor: param.color,
                shadowOpacity: 0.10,
                shadowRadius: 8,
                shadowOffset: { width: 0, height: 2 },
                elevation: 2,
                borderWidth: 1.5,
                borderColor: param.color,
                minHeight: 54,
              }}
            >
              <View style={{ flexDirection: "row", alignItems: "center", minWidth: 90 }}>
                <View style={{
                  width: 7,
                  height: 36,
                  borderRadius: 3,
                  backgroundColor: param.color,
                  marginRight: 10,
                }} />
                <Text
                  style={{
                    fontSize: 16,
                    color: "#3a3fbd",
                    fontWeight: "bold",
                    width: 80,
                    flexShrink: 1,
                  }}
                  numberOfLines={1}
                  ellipsizeMode="tail"
                >
                  {param.label}
                </Text>
              </View>
              <Text style={{
                fontSize: 17,
                color: param.color,
                fontWeight: "bold",
                minWidth: 60,
                textAlign: "right"
              }}>
                {param.value} {param.unit}
              </Text>
              {param.nav ? (
                <Pressable
                  style={{
                    backgroundColor: "#009688",
                    borderRadius: 8,
                    paddingHorizontal: 12,
                    paddingVertical: 6,
                    marginLeft: 8,
                    elevation: 2,
                  }}
                  onPress={() => navigation.navigate(param.nav)}
                >
                  <Text style={{
                    color: "#fff",
                    fontSize: 18,
                    fontWeight: "bold",
                  }}>
                    {">"}
                  </Text>
                </Pressable>
              ) : null}
            </View>
          ))}
        </ScrollView>
        {debugMsg && (
          <Text style={{ color: "#888", fontSize: 12, marginTop: 16 }}>{debugMsg}</Text>
        )}
        {data === undefined && (
          <Text style={{ color: "#d32f2f", marginTop: 8 }}>
            {language === "English" ? "Fetching data..." : "Kinukuha ang datos..."}
          </Text>
        )}
        {data === null && (
          <Text style={{ color: "#d32f2f", marginTop: 8 }}>
            {language === "English" ? "No data available." : "Walang datos."}
          </Text>
        )}
      </View>
    </View>
  );
}